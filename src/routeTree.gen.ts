/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as authenticatedRouteRouteImport } from './routes/(authenticated)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authenticatedSubscriptionSucessRouteImport } from './routes/(authenticated)/subscription-sucess'
import { Route as authenticatedListRouteImport } from './routes/(authenticated)/list'
import { Route as authenticatedImportDataRouteImport } from './routes/(authenticated)/import-data'
import { Route as authenticatedDashboardRouteImport } from './routes/(authenticated)/dashboard'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedRouteRoute = authenticatedRouteRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedSubscriptionSucessRoute =
  authenticatedSubscriptionSucessRouteImport.update({
    id: '/subscription-sucess',
    path: '/subscription-sucess',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)
const authenticatedListRoute = authenticatedListRouteImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authenticatedImportDataRoute = authenticatedImportDataRouteImport.update({
  id: '/import-data',
  path: '/import-data',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authenticatedDashboardRoute = authenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/dashboard': typeof authenticatedDashboardRoute
  '/import-data': typeof authenticatedImportDataRoute
  '/list': typeof authenticatedListRoute
  '/subscription-sucess': typeof authenticatedSubscriptionSucessRoute
}
export interface FileRoutesByTo {
  '/': typeof authenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/dashboard': typeof authenticatedDashboardRoute
  '/import-data': typeof authenticatedImportDataRoute
  '/list': typeof authenticatedListRoute
  '/subscription-sucess': typeof authenticatedSubscriptionSucessRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/(authenticated)/dashboard': typeof authenticatedDashboardRoute
  '/(authenticated)/import-data': typeof authenticatedImportDataRoute
  '/(authenticated)/list': typeof authenticatedListRoute
  '/(authenticated)/subscription-sucess': typeof authenticatedSubscriptionSucessRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/dashboard'
    | '/import-data'
    | '/list'
    | '/subscription-sucess'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/dashboard'
    | '/import-data'
    | '/list'
    | '/subscription-sucess'
  id:
    | '__root__'
    | '/'
    | '/(authenticated)'
    | '/login'
    | '/signup'
    | '/(authenticated)/dashboard'
    | '/(authenticated)/import-data'
    | '/(authenticated)/list'
    | '/(authenticated)/subscription-sucess'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)/subscription-sucess': {
      id: '/(authenticated)/subscription-sucess'
      path: '/subscription-sucess'
      fullPath: '/subscription-sucess'
      preLoaderRoute: typeof authenticatedSubscriptionSucessRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/list': {
      id: '/(authenticated)/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof authenticatedListRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/import-data': {
      id: '/(authenticated)/import-data'
      path: '/import-data'
      fullPath: '/import-data'
      preLoaderRoute: typeof authenticatedImportDataRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/dashboard': {
      id: '/(authenticated)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authenticatedDashboardRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
  }
}

interface authenticatedRouteRouteChildren {
  authenticatedDashboardRoute: typeof authenticatedDashboardRoute
  authenticatedImportDataRoute: typeof authenticatedImportDataRoute
  authenticatedListRoute: typeof authenticatedListRoute
  authenticatedSubscriptionSucessRoute: typeof authenticatedSubscriptionSucessRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedDashboardRoute: authenticatedDashboardRoute,
  authenticatedImportDataRoute: authenticatedImportDataRoute,
  authenticatedListRoute: authenticatedListRoute,
  authenticatedSubscriptionSucessRoute: authenticatedSubscriptionSucessRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
